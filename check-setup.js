#!/usr/bin/env node

import { existsSync, readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __dirname = dirname(fileURLToPath(import.meta.url));

console.log('üîç V√©rification de la configuration SailingLoc...\n');

// V√©rification du fichier .env
const envPath = join(__dirname, '.env');
let envExists = existsSync(envPath);
let envComplete = false;

if (envExists) {
  console.log('‚úÖ Fichier .env trouv√©');
  
  try {
    const envContent = readFileSync(envPath, 'utf8');
    const requiredVars = ['MONGODB_URI', 'JWT_SECRET', 'BREVO_API_KEY', 'CONTACT_TO_EMAIL'];
    const missingVars = [];
    
    requiredVars.forEach(varName => {
      if (!envContent.includes(`${varName}=`) || envContent.includes(`${varName}=votre_`)) {
        missingVars.push(varName);
      }
    });
    
    if (missingVars.length === 0) {
      console.log('‚úÖ Toutes les variables d\'environnement sont configur√©es');
      envComplete = true;
    } else {
      console.log('‚ö†Ô∏è  Variables d\'environnement manquantes ou non configur√©es:');
      missingVars.forEach(varName => console.log(`   - ${varName}`));
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la lecture du fichier .env');
  }
} else {
  console.log('‚ùå Fichier .env non trouv√©');
  console.log('   Copiez .env.example vers .env et configurez vos variables');
}

// V√©rification des node_modules
const nodeModulesPath = join(__dirname, 'node_modules');
if (existsSync(nodeModulesPath)) {
  console.log('‚úÖ D√©pendances install√©es');
} else {
  console.log('‚ùå D√©pendances non install√©es');
  console.log('   Ex√©cutez: npm install');
}

// V√©rification de la configuration Vite
const viteConfigPath = join(__dirname, 'vite.config.js');
if (existsSync(viteConfigPath)) {
  console.log('‚úÖ Configuration Vite pr√©sente');
} else {
  console.log('‚ùå Configuration Vite manquante');
}

// V√©rification du serveur
const serverPath = join(__dirname, 'server', 'server.cjs');
if (existsSync(serverPath)) {
  console.log('‚úÖ Serveur backend configur√©');
} else {
  console.log('‚ùå Fichier serveur manquant');
}

console.log('\nüìã R√©sum√©:');

if (envExists && envComplete && existsSync(nodeModulesPath)) {
  console.log('üéâ Configuration compl√®te ! Vous pouvez lancer:');
  console.log('   npm run dev:full    # Frontend + Backend en parall√®le');
  console.log('   ou s√©par√©ment:');
  console.log('   npm run server      # Backend seul (port 3000)');
  console.log('   npm run dev         # Frontend seul (port 5173)');
} else {
  console.log('‚ö†Ô∏è  Configuration incompl√®te. Consultez DEMARRAGE_LOCAL.md');
}

console.log('\nüåê URLs une fois lanc√©:');
console.log('   Frontend: http://localhost:5173');
console.log('   Backend:  http://localhost:3000/api');
console.log('   Test API: http://localhost:3000/api/health');